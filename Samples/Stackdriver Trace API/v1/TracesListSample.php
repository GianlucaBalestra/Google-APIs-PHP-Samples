<?php
// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     PHP generator version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unofficial sample for the Cloud Trace v1 API for PHP. 
// This sample is designed to be used with the Google PHP client library. (https://github.com/google/google-api-php-client)
// 
// API Description: Send and retrieve trace data from Stackdriver Trace. Data is generated and available by default for all App Engine applications. Data from other applications can be written to Stackdriver Trace for display, reporting, and analysis.
// API Documentation Link https://cloud.google.com/trace
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/cloudtrace/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// The preferred method is via https://getcomposer.org. Follow the installation instructions https://getcomposer.org/doc/00-intro.md 
// if you do not already have composer installed.
//
// Once composer is installed, execute the following command in your project root to install this library:
//
// composer require google/apiclient:^2.0
//
//------------------------------------------------------------------------------  
// Load the Google API PHP Client Library.
require_once __DIR__ . '/vendor/autoload.php';
session_start();

/***************************************************
* Include this line for service account authencation.  Note: Not all APIs support service accounts.  
//require_once __DIR__ . '/ServiceAccount.php';     
* Include the following four lines Oauth2 authencation.
* require_once __DIR__ . '/Oauth2Authentication.php';
* $_SESSION['mainScript'] = basename($_SERVER['PHP_SELF']);   // Oauth2callback.php will return here.
* $client = getGoogleClient();
* $service = new Google_Service_Cloudtrace($client); 
****************************************************/

// Option paramaters can be set as needed.
 $optParams = array(
            
  //'filter' => '[YourValue]',  // An optional filter against labels for the request.By default, searches use prefix matching. To specify exact match, prependa plus symbol (`+`) to the search term.Multiple terms are ANDed. Syntax:*   `root:NAME_PREFIX` or `NAME_PREFIX`: Return traces where any root    span starts with `NAME_PREFIX`.*   `+root:NAME` or `+NAME`: Return traces where any root span's name is    exactly `NAME`.*   `span:NAME_PREFIX`: Return traces where any span starts with    `NAME_PREFIX`.*   `+span:NAME`: Return traces where any span's name is exactly    `NAME`.*   `latency:DURATION`: Return traces whose overall latency is    greater or equal to than `DURATION`. Accepted units are nanoseconds    (`ns`), milliseconds (`ms`), and seconds (`s`). Default is `ms`. For    example, `latency:24ms` returns traces whose overall latency    is greater than or equal to 24 milliseconds.*   `label:LABEL_KEY`: Return all traces containing the specified    label key (exact match, case-sensitive) regardless of the key:value    pair's value (including empty values).*   `LABEL_KEY:VALUE_PREFIX`: Return all traces containing the specified    label key (exact match, case-sensitive) whose value starts with    `VALUE_PREFIX`. Both a key and a value must be specified.*   `+LABEL_KEY:VALUE`: Return all traces containing a key:value pair    exactly matching the specified text. Both a key and a value must be    specified.*   `method:VALUE`: Equivalent to `/http/method:VALUE`.*   `url:VALUE`: Equivalent to `/http/url:VALUE`.
            
  //'endTime' => '[YourValue]',  // End of the time interval (inclusive) during which the trace data wascollected from the application.
            
  //'pageToken' => '[YourValue]',  // Token identifying the page of results to return. If provided, use thevalue of the `next_page_token` field from a previous request. Optional.
            
  //'startTime' => '[YourValue]',  // Start of the time interval (inclusive) during which the trace data wascollected from the application.
            
  //'pageSize' => '[YourValue]',  // Maximum number of traces to return. If not specified or <= 0, theimplementation selects a reasonable value.  The implementation mayreturn fewer traces than the requested page size. Optional.
            
  //'view' => '[YourValue]',  // Type of data returned for traces in the list. Optional. Default is`MINIMAL`.
            
  //'orderBy' => '[YourValue]',  // Field used to sort the returned traces. Optional.Can be one of the following:*   `trace_id`*   `name` (`name` field of root span in the trace)*   `duration` (difference between `end_time` and `start_time` fields of     the root span)*   `start` (`start_time` field of the root span)Descending order can be specified by appending `desc` to the sort field(for example, `name desc`).Only one sort field is permitted.
  'fields' => '*'
);
// Single Request.
$results = tracesListExample($service, $projectId, $optParams);

// Paginiation Example
do {
    if (!$results->getNextPageToken()) 
		break;

	$optParams['pageToken'] = $results->getNextPageToken();
	$results = filesListExample($service, $projectId, $optParams);	
} while($results->getNextPageToken());  

/**
* Returns of a list of traces that match the specified filter conditions.
* @service Authenticated Cloudtrace service.
* @optParams Optional paramaters are not required by a request.
* @projectId ID of the Cloud project where the trace data is stored.
* @return ListTracesResponse
*/
function tracesListExample($service, $projectId, $optParams)
{
	try
	{
		// Parameter validation.
		if ($service == null)
			throw new Exception("service is required.");
		if ($optParams == null)
			throw new Exception("optParams is required.");
		if (projectId == null)
			throw new Exception("projectId is required.");
		// Make the request and return the results.
		return $service->traces->ListTraces($projectId, $optParams);
	}
	catch (Exception $e)
	{
		print "An error occurred: " . $e->getMessage();
	}
}
?>
