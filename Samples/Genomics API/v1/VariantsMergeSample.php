<?php
// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     PHP generator version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unofficial sample for the genomics v1 API for PHP. 
// This sample is designed to be used with the Google PHP client library. (https://github.com/google/google-api-php-client)
// 
// API Description: Upload, process, query, and search Genomics data in the cloud.
// API Documentation Link https://cloud.google.com/genomics
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/genomics/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// The preferred method is via https://getcomposer.org. Follow the installation instructions https://getcomposer.org/doc/00-intro.md 
// if you do not already have composer installed.
//
// Once composer is installed, execute the following command in your project root to install this library:
//
// composer require google/apiclient:^2.0
//
//------------------------------------------------------------------------------  
// Load the Google API PHP Client Library.
require_once __DIR__ . '/vendor/autoload.php';
session_start();

/***************************************************
* Include this line for service account authencation.  Note: Not all APIs support service accounts.  
//require_once __DIR__ . '/ServiceAccount.php';     
* Include the following four lines Oauth2 authencation.
* require_once __DIR__ . '/Oauth2Authentication.php';
* $_SESSION['mainScript'] = basename($_SERVER['PHP_SELF']);   // Oauth2callback.php will return here.
* $client = getGoogleClient();
* $service = new Google_Service_Genomics($client); 
****************************************************/

// Option paramaters can be set as needed.
 $optParams = array(
  'fields' => '*'
);
// Single Request.
$results = variantsMergeExample($service, $optParams);


/**
* Merges the given variants with existing variants.For the definitions of variants and other genomics resources, see[Fundamentals of GoogleGenomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)Each variant will bemerged with an existing variant that matches its reference sequence,start, end, reference bases, and alternative bases. If no such variantexists, a new one will be created.When variants are merged, the call information from the new variantis added to the existing variant. Variant info fields are merged asspecified in theinfoMergeConfigfield of the MergeVariantsRequest.Please exercise caution when using this method!  It is easy to introducemistakes in existing variants and difficult to back out of them.  Forexample,suppose you were trying to merge a new variant with an existing one andbothvariants contain calls that belong to callsets with the same callset ID.    // Existing variant - irrelevant fields trimmed for clarity    {        "variantSetId": "10473108253681171589",        "referenceName": "1",        "start": "10582",        "referenceBases": "G",        "alternateBases": [            "A"        ],        "calls": [            {                "callSetId": "10473108253681171589-0",                "callSetName": "CALLSET0",                "genotype": [                    0,                    1                ],            }        ]    }    // New variant with conflicting call information    {        "variantSetId": "10473108253681171589",        "referenceName": "1",        "start": "10582",        "referenceBases": "G",        "alternateBases": [            "A"        ],        "calls": [            {                "callSetId": "10473108253681171589-0",                "callSetName": "CALLSET0",                "genotype": [                    1,                    1                ],            }        ]    }The resulting merged variant would overwrite the existing calls with thosefrom the new variant:    {        "variantSetId": "10473108253681171589",        "referenceName": "1",        "start": "10582",        "referenceBases": "G",        "alternateBases": [            "A"        ],        "calls": [            {                "callSetId": "10473108253681171589-0",                "callSetName": "CALLSET0",                "genotype": [                    1,                    1                ],            }        ]    }This may be the desired outcome, but it is up to the user to determine ifif that is indeed the case.
* @service Authenticated Genomics service.
* @optParams Optional paramaters are not required by a request.
* @return Empty
*/
function variantsMergeExample($service, $optParams)
{
	try
	{
		// Parameter validation.
		if ($service == null)
			throw new Exception("service is required.");
		if ($optParams == null)
			throw new Exception("optParams is required.");
		// Make the request and return the results.
		return $service->variants->MergeVariants($optParams);
	}
	catch (Exception $e)
	{
		print "An error occurred: " . $e->getMessage();
	}
}
?>
