<?php
// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-09-25
//     PHP generator version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unofficial sample for the doubleclicksearch v2 API for PHP. 
// This sample is designed to be used with the Google PHP client library. (https://github.com/google/google-api-php-client)
// 
// API Description: Reports and modifies your advertising data in DoubleClick Search (for example, campaigns, ad groups, keywords, and conversions).
// API Documentation Link https://developers.google.com/doubleclick-search/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Doubleclicksearch/v2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// The preferred method is via https://getcomposer.org. Follow the installation instructions https://getcomposer.org/doc/00-intro.md 
// if you do not already have composer installed.
//
// Once composer is installed, execute the following command in your project root to install this library:
//
// composer require google/apiclient:^2.0
//
//------------------------------------------------------------------------------  
// Load the Google API PHP Client Library.
require_once __DIR__ . '/vendor/autoload.php';
session_start();

/***************************************************
* Include this line for service account authencation.  Note: Not all APIs support service accounts.  
//require_once __DIR__ . '/ServiceAccount.php';     
* Include the following four lines Oauth2 authencation.
* require_once __DIR__ . '/Oauth2Authentication.php';
* $_SESSION['mainScript'] = basename($_SERVER['PHP_SELF']);   // Oauth2callback.php will return here.
* $client = getGoogleClient();
* $service = new Google_Service_Doubleclicksearch($client); 
****************************************************/

print_r(conversionGetExample($service, $agencyId, $advertiserId, $engineAccountId, $endDate, $rowCount, $startDate, $startRow));

/**
* Retrieves a list of conversions from a DoubleClick Search engine account.
* @service Authenticated Doubleclicksearch service.
* @advertiserId Numeric ID of the advertiser.
* @agencyId Numeric ID of the agency.
* @endDate Last date (inclusive) on which to retrieve conversions. Format is yyyymmdd.
* @engineAccountId Numeric ID of the engine account.
* @rowCount The number of conversions to return per call.
* @startDate First date (inclusive) on which to retrieve conversions. Format is yyyymmdd.
* @startRow The 0-based starting index for retrieving conversions results.
* @return ConversionList</returns>
*/
function conversionGetExample($service, $agencyId, $advertiserId, $engineAccountId, $endDate, $rowCount, $startDate, $startRow)
{
	try
	{
		// Parameter validation.
		if ($service == null)
			throw new Exception("service is required.");
		if (advertiserId == null)
			throw new Exception("advertiserId is required.");
		if (agencyId == null)
			throw new Exception("agencyId is required.");
		if (endDate == null)
			throw new Exception("endDate is required.");
		if (engineAccountId == null)
			throw new Exception("engineAccountId is required.");
		if (rowCount == null)
			throw new Exception("rowCount is required.");
		if (startDate == null)
			throw new Exception("startDate is required.");
		if (startRow == null)
			throw new Exception("startRow is required.");
		// Make the request and return the results.
		return $service->conversion->GetConversion($agencyId, $advertiserId, $engineAccountId, $endDate, $rowCount, $startDate, $startRow);
	}
	catch (Exception $ex)
	{
		print "An error occurred: " . $e->getMessage();
	}
}
?>
