<?php
// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-09-27
//     PHP generator version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unofficial sample for the dfareporting v2.8 API for PHP. 
// This sample is designed to be used with the Google PHP client library. (https://github.com/google/google-api-php-client)
// 
// API Description: Manages your DoubleClick Campaign Manager ad campaigns and reports.
// API Documentation Link https://developers.google.com/doubleclick-advertisers/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/dfareporting/v2_8/rest
//
//------------------------------------------------------------------------------
// Installation
//
// The preferred method is via https://getcomposer.org. Follow the installation instructions https://getcomposer.org/doc/00-intro.md 
// if you do not already have composer installed.
//
// Once composer is installed, execute the following command in your project root to install this library:
//
// composer require google/apiclient:^2.0
//
//------------------------------------------------------------------------------  
// Load the Google API PHP Client Library.
require_once __DIR__ . '/vendor/autoload.php';
session_start();

/***************************************************
* Include this line for service account authencation.  Note: Not all APIs support service accounts.  
//require_once __DIR__ . '/ServiceAccount.php';     
* Include the following four lines Oauth2 authencation.
* require_once __DIR__ . '/Oauth2Authentication.php';
* $_SESSION['mainScript'] = basename($_SERVER['PHP_SELF']);   // Oauth2callback.php will return here.
* $client = getGoogleClient();
* $service = new Google_Service_Dfareporting($client); 
****************************************************/

// Option paramaters can be set as needed.
 $optParams = array(
            
  //'advertiserIds' => '[YourValue]',  // Select only placement groups that belong to these advertisers.
            
  //'archived' => '[YourValue]',  // Select only archived placements. Don't set this field to select both archived and non-archived placements.
            
  //'campaignIds' => '[YourValue]',  // Select only placement groups that belong to these campaigns.
            
  //'contentCategoryIds' => '[YourValue]',  // Select only placement groups that are associated with these content categories.
            
  //'directorySiteIds' => '[YourValue]',  // Select only placement groups that are associated with these directory sites.
            
  //'ids' => '[YourValue]',  // Select only placement groups with these IDs.
            
  //'maxEndDate' => '[YourValue]',  // Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
            
  //'maxResults' => '[YourValue]',  // Maximum number of results to return.
            
  //'maxStartDate' => '[YourValue]',  // Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
            
  //'minEndDate' => '[YourValue]',  // Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
            
  //'minStartDate' => '[YourValue]',  // Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
            
  //'pageToken' => '[YourValue]',  // Value of the nextPageToken from the previous result page.
            
  //'placementGroupType' => '[YourValue]',  // Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.
            
  //'placementStrategyIds' => '[YourValue]',  // Select only placement groups that are associated with these placement strategies.
            
  //'pricingTypes' => '[YourValue]',  // Select only placement groups with these pricing types.
            
  //'searchString' => '[YourValue]',  // Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placement groups with names like "placement group June 2015", "placement group May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementgroup" will match placement groups with name "my placementgroup", "placementgroup 2015", or simply "placementgroup".
            
  //'siteIds' => '[YourValue]',  // Select only placement groups that are associated with these sites.
            
  //'sortField' => '[YourValue]',  // Field by which to sort the list.
            
  //'sortOrder' => '[YourValue]',  // Order of sorted results.
  'fields' => '*'
);
// Single Request.
$results = placementGroupsListExample($service, $profileId, $optParams);

// Paginiation Example
do {
    if (!$results->getNextPageToken()) 
		break;

	$optParams['pageToken'] = $results->getNextPageToken();
	$results = filesListExample($service, $profileId, $optParams);	
} while($results->getNextPageToken());  

/**
* Retrieves a list of placement groups, possibly filtered. This method supports paging.
* @service Authenticated Dfareporting service.
* @optParams Optional paramaters are not required by a request.
* @profileId User profile ID associated with this request.
* @return PlacementGroupsListResponse
*/
function placementGroupsListExample($service, $profileId, $optParams)
{
	try
	{
		// Parameter validation.
		if ($service == null)
			throw new Exception("service is required.");
		if ($optParams == null)
			throw new Exception("optParams is required.");
		if (profileId == null)
			throw new Exception("profileId is required.");
		// Make the request and return the results.
		return $service->placementGroups->ListPlacementGroups($profileId, $optParams);
	}
	catch (Exception $e)
	{
		print "An error occurred: " . $e->getMessage();
	}
}
?>
