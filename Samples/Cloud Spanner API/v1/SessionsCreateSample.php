<?php
// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-09-26
//     PHP generator version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unofficial sample for the Spanner v1 API for PHP. 
// This sample is designed to be used with the Google PHP client library. (https://github.com/google/google-api-php-client)
// 
// API Description: Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
// API Documentation Link https://cloud.google.com/spanner/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/spanner/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// The preferred method is via https://getcomposer.org. Follow the installation instructions https://getcomposer.org/doc/00-intro.md 
// if you do not already have composer installed.
//
// Once composer is installed, execute the following command in your project root to install this library:
//
// composer require google/apiclient:^2.0
//
//------------------------------------------------------------------------------  
// Load the Google API PHP Client Library.
require_once __DIR__ . '/vendor/autoload.php';
session_start();

/***************************************************
* Include this line for service account authencation.  Note: Not all APIs support service accounts.  
//require_once __DIR__ . '/ServiceAccount.php';     
* Include the following four lines Oauth2 authencation.
* require_once __DIR__ . '/Oauth2Authentication.php';
* $_SESSION['mainScript'] = basename($_SERVER['PHP_SELF']);   // Oauth2callback.php will return here.
* $client = getGoogleClient();
* $service = new Google_Service_Spanner($client); 
****************************************************/

// Option paramaters can be set as needed.
 $optParams = array(
  'fields' => '*'
);
// Single Request.
$results = sessionsCreateExample($service, $database, $optParams);


/**
* Creates a new session. A session can be used to performtransactions that read and/or modify data in a Cloud Spanner database.Sessions are meant to be reused for many consecutivetransactions.Sessions can only execute one transaction at a time. To executemultiple concurrent read-write/write-only transactions, createmultiple sessions. Note that standalone reads and queries use atransaction internally, and count toward the one transactionlimit.Cloud Spanner limits the number of sessions that can exist at any giventime; thus, it is a good idea to delete idle and/or unneeded sessions.Aside from explicit deletes, Cloud Spanner can delete sessions for which nooperations are sent for more than an hour. If a session is deleted,requests to it return `NOT_FOUND`.Idle sessions can be kept alive by sending a trivial SQL queryperiodically, e.g., `"SELECT 1"`.
* @service Authenticated Spanner service.
* @optParams Optional paramaters are not required by a request.
* @database Required. The database in which the new session is created.
* @return Session
*/
function sessionsCreateExample($service, $database, $optParams)
{
	try
	{
		// Parameter validation.
		if ($service == null)
			throw new Exception("service is required.");
		if ($optParams == null)
			throw new Exception("optParams is required.");
		if (database == null)
			throw new Exception("database is required.");
		// Make the request and return the results.
		return $service->sessions->CreateSessions($database, $optParams);
	}
	catch (Exception $e)
	{
		print "An error occurred: " . $e->getMessage();
	}
}
?>
