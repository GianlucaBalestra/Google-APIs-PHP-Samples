<?php
// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-10-08
//     PHP generator version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unofficial sample for the Cloud Tasks v2beta2 API for PHP. 
// This sample is designed to be used with the Google PHP client library. (https://github.com/google/google-api-php-client)
// 
// API Description: Manages the execution of large numbers of distributed requests. Cloud Tasks is in Alpha.
// API Documentation Link https://cloud.google.com/cloud-tasks/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/cloudtasks/v2beta2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// The preferred method is via https://getcomposer.org. Follow the installation instructions https://getcomposer.org/doc/00-intro.md 
// if you do not already have composer installed.
//
// Once composer is installed, execute the following command in your project root to install this library:
//
// composer require google/apiclient:^2.0
//
//------------------------------------------------------------------------------  
// Load the Google API PHP Client Library.
require_once __DIR__ . '/vendor/autoload.php';
session_start();

/***************************************************
* Include this line for service account authencation.  Note: Not all APIs support service accounts.  
//require_once __DIR__ . '/ServiceAccount.php';     
* Include the following four lines Oauth2 authencation.
* require_once __DIR__ . '/Oauth2Authentication.php';
* $_SESSION['mainScript'] = basename($_SERVER['PHP_SELF']);   // Oauth2callback.php will return here.
* $client = getGoogleClient();
* $service = new Google_Service_Cloudtasks($client); 
****************************************************/

// Option paramaters can be set as needed.
 $optParams = array(
  'fields' => '*'
);
// Single Request.
$results = tasksPullExample($service, $name, $optParams);


/**
* Pulls tasks from a pull queue and acquires a lease on them for aspecified PullTasksRequest.lease_duration.This method is invoked by the lease holder to obtain thelease. The lease holder must acknowledge the task viaCloudTasks.AcknowledgeTask after they have performed the workassociated with the task.The payload is intended to store data that the lease holder needsto perform the work associated with the task. To return thepayloads in the PullTasksResponse, setPullTasksRequest.response_view to Task.View.FULL.A maximum of 10 qps of CloudTasks.PullTasks requests are allowed perqueue. google.rpc.Code.RESOURCE_EXHAUSTED is returned when this limitis exceeded. google.rpc.Code.RESOURCE_EXHAUSTED is also returned whenRateLimits.max_tasks_dispatched_per_second is exceeded.
* @service Authenticated Cloudtasks service.
* @optParams Optional paramaters are not required by a request.
* @name Required.

The queue name. For example:
`projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
* @return PullTasksResponse
*/
function tasksPullExample($service, $name, $optParams)
{
	try
	{
		// Parameter validation.
		if ($service == null)
			throw new Exception("service is required.");
		if ($optParams == null)
			throw new Exception("optParams is required.");
		if (name == null)
			throw new Exception("name is required.");
		// Make the request and return the results.
		return $service->tasks->PullTasks($name, $optParams);
	}
	catch (Exception $e)
	{
		print "An error occurred: " . $e->getMessage();
	}
}
?>
