<?php
// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-09-26
//     PHP generator version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unofficial sample for the Translate v2 API for PHP. 
// This sample is designed to be used with the Google PHP client library. (https://github.com/google/google-api-php-client)
// 
// API Description: The Google Cloud Translation API lets websites and programs integrate with    Google Translate programmatically.
// API Documentation Link https://code.google.com/apis/language/translate/v2/getting_started.html
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/translate/v2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// The preferred method is via https://getcomposer.org. Follow the installation instructions https://getcomposer.org/doc/00-intro.md 
// if you do not already have composer installed.
//
// Once composer is installed, execute the following command in your project root to install this library:
//
// composer require google/apiclient:^2.0
//
//------------------------------------------------------------------------------  
// Load the Google API PHP Client Library.
require_once __DIR__ . '/vendor/autoload.php';
session_start();

/***************************************************
* Include this line for service account authencation.  Note: Not all APIs support service accounts.  
//require_once __DIR__ . '/ServiceAccount.php';     
* Include the following four lines Oauth2 authencation.
* require_once __DIR__ . '/Oauth2Authentication.php';
* $_SESSION['mainScript'] = basename($_SERVER['PHP_SELF']);   // Oauth2callback.php will return here.
* $client = getGoogleClient();
* $service = new Google_Service_Translate($client); 
****************************************************/

// Option paramaters can be set as needed.
 $optParams = array(
            
  //'model' => '[YourValue]',  //The `model` type requested for this translation. Valid values arelisted in public documentation.
            
  //'source' => '[YourValue]',  //The language of the source text, set to one of the language codes listed inLanguage Support. If the source language is not specified, the API willattempt to identify the source language automatically and return it withinthe response.
            
  //'cid' => '[YourValue]',  //The customization id for translate
            
  //'format' => '[YourValue]',  //The format of the source text, in either HTML (default) or plain-text. Avalue of "html" indicates HTML and a value of "text" indicates plain-text.
  'fields' => '*'
);
// Single Request.
$results = translationsListExample($service, $q, $target, $optParams);


/**
* Translates input text, returning translated text.
* @service Authenticated Translate service.
* @optParams Optional paramaters are not required by a request.
* @q The input text to translate. Repeat this parameter to perform translation
operations on multiple text inputs.
* @target The language to use for translation of the input text, set to one of the
language codes listed in Language Support.
* @return TranslationsListResponse
*/
function translationsListExample($service, $q, $target, $optParams)
{
	try
	{
		// Parameter validation.
		if ($service == null)
			throw new Exception("service is required.");
		if ($optParams == null)
			throw new Exception("optParams is required.");
		if (q == null)
			throw new Exception("q is required.");
		if (target == null)
			throw new Exception("target is required.");
		// Make the request and return the results.
		return $service->translations->ListTranslations($q, $target, $optParams);
	}
	catch (Exception $e)
	{
		print "An error occurred: " . $e->getMessage();
	}
}
?>
