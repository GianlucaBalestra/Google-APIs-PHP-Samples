<?php
// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-09-27
//     PHP generator version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unofficial sample for the Clouderrorreporting v1beta1 API for PHP. 
// This sample is designed to be used with the Google PHP client library. (https://github.com/google/google-api-php-client)
// 
// API Description: Groups and counts similar errors from cloud services and applications, reports new errors, and provides access to error groups and their associated errors.
// API Documentation Link https://cloud.google.com/error-reporting/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/clouderrorreporting/v1beta1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// The preferred method is via https://getcomposer.org. Follow the installation instructions https://getcomposer.org/doc/00-intro.md 
// if you do not already have composer installed.
//
// Once composer is installed, execute the following command in your project root to install this library:
//
// composer require google/apiclient:^2.0
//
//------------------------------------------------------------------------------  
// Load the Google API PHP Client Library.
require_once __DIR__ . '/vendor/autoload.php';
session_start();

/***************************************************
* Include this line for service account authencation.  Note: Not all APIs support service accounts.  
//require_once __DIR__ . '/ServiceAccount.php';     
* Include the following four lines Oauth2 authencation.
* require_once __DIR__ . '/Oauth2Authentication.php';
* $_SESSION['mainScript'] = basename($_SERVER['PHP_SELF']);   // Oauth2callback.php will return here.
* $client = getGoogleClient();
* $service = new Google_Service_Clouderrorreporting($client); 
****************************************************/

// Option paramaters can be set as needed.
 $optParams = array(
            
  //'serviceFilter.service' => '[YourValue]',  // [Optional] The exact value to match against[`ServiceContext.service`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.service).
            
  //'pageSize' => '[YourValue]',  // [Optional] The maximum number of results to return per response.Default is 20.
            
  //'order' => '[YourValue]',  // [Optional] The sort order in which the results are returned.Default is `COUNT_DESC`.
            
  //'serviceFilter.version' => '[YourValue]',  // [Optional] The exact value to match against[`ServiceContext.version`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.version).
            
  //'serviceFilter.resourceType' => '[YourValue]',  // [Optional] The exact value to match against[`ServiceContext.resource_type`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.resource_type).
            
  //'alignmentTime' => '[YourValue]',  // [Optional] Time where the timed counts shall be aligned if roundedalignment is chosen. Default is 00:00 UTC.
            
  //'timedCountDuration' => '[YourValue]',  // [Optional] The preferred duration for a single returned `TimedCount`.If not set, no timed counts are returned.
            
  //'pageToken' => '[YourValue]',  // [Optional] A `next_page_token` provided by a previous response. To viewadditional results, pass this token along with the identical queryparameters as the first request.
            
  //'timeRange.period' => '[YourValue]',  // Restricts the query to the specified time range.
            
  //'alignment' => '[YourValue]',  // [Optional] The alignment of the timed counts to be returned.Default is `ALIGNMENT_EQUAL_AT_END`.
            
  //'groupId' => '[YourValue]',  // [Optional] List all <code>ErrorGroupStats</code> with these IDs.
  'fields' => '*'
);
// Single Request.
$results = groupStatsListExample($service, $projectName, $optParams);

// Paginiation Example
do {
    if (!$results->getNextPageToken()) 
		break;

	$optParams['pageToken'] = $results->getNextPageToken();
	$results = filesListExample($service, $projectName, $optParams);	
} while($results->getNextPageToken());  

/**
* Lists the specified groups.
* @service Authenticated Clouderrorreporting service.
* @optParams Optional paramaters are not required by a request.
* @projectName [Required] The resource name of the Google Cloud Platform project. Written
as <code>projects/</code> plus the
<a href="https://support.google.com/cloud/answer/6158840">Google Cloud
Platform project ID</a>.

Example: <code>projects/my-project-123</code>.
* @return ListGroupStatsResponse
*/
function groupStatsListExample($service, $projectName, $optParams)
{
	try
	{
		// Parameter validation.
		if ($service == null)
			throw new Exception("service is required.");
		if ($optParams == null)
			throw new Exception("optParams is required.");
		if (projectName == null)
			throw new Exception("projectName is required.");
		// Make the request and return the results.
		return $service->groupStats->ListGroupStats($projectName, $optParams);
	}
	catch (Exception $e)
	{
		print "An error occurred: " . $e->getMessage();
	}
}
?>
