<#@ template language="C#" #>
<#@ output extension=".php" #>
<#@ assembly name="C:\Users\HP_User\Source\Repos\discoverysamplebuilder\Src\GoogleSampleBuilder\packages\Google.Apis.1.27.1\lib\net45\Google.Apis.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="GoogleSampleBuilder.Core.Util" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Google.Apis.Discovery.v1.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="APIResponse" type="Google.Apis.Discovery.v1.Data.RestDescription" #>
<# string thisFile = "Oauth2Authentication.tt"; 
var CleanName = ((APIResponse.CanonicalName != null) ? APIResponse.CanonicalName : APIResponse.Name).Replace(" ",string.Empty); 
CleanName = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(CleanName.ToLower()); #>
<#@include file="LicenceHeader.tt" #>  
<#@include file="InstallationHeader.tt" #>  
require_once __DIR__ . '/vendor/autoload.php';
/**
 * Gets the Google client refreshing auth if needed.
 * Documentation: https://developers.google.com/identity/protocols/OAuth2
 * Initializes a client object.
 * @return A google client object.
 */
function getGoogleClient() {
	$client = getOauth2Client();

	// Refresh the token if it's expired.
	if ($client->isAccessTokenExpired()) {
		$client->fetchAccessTokenWithRefreshToken($client->getRefreshToken());
		file_put_contents($credentialsPath, json_encode($client->getAccessToken()));
	}
return $client;
}

/**
 * Builds the Google client object.
 * Documentation: https://developers.google.com/identity/protocols/OAuth2
 * Scopes will need to be changed depending upon the API's being accessed.
 * Example:  array(Google_Service_Analytics::ANALYTICS_READONLY, Google_Service_Analytics::ANALYTICS)
 * List of Google Scopes: https://developers.google.com/identity/protocols/googlescopes
 * @return A google client object.
 */
function buildClient(){
	
	$client = new Google_Client();
	$client->setAccessType("offline");        // offline access.  Will result in a refresh token
	$client->setIncludeGrantedScopes(true);   // incremental auth
	$client->setAuthConfig(__DIR__ . '/client_secrets.json');
	$client->addScope([YOUR SCOPES HERE]);
	$client->setRedirectUri(getRedirectUri());	
	return $client;
}

/**
 * Builds the redirect uri.
 * Documentation: https://developers.google.com/api-client-library/python/auth/installed-app#choosingredirecturi
 * Hostname and current server path are needed to redirect to oauth2callback.php
 * @return A redirect uri.
 */
function getRedirectUri(){

	//Building Redirect URI
	$url = $_SERVER['REQUEST_URI'];                    //returns the current URL
	if(strrpos($url, '?') > 0)
		$url = substr($url, 0, strrpos($url, '?') );  // Removing any parameters.
	$folder = substr($url, 0, strrpos($url, '/') );   // Removeing current file.
	return (isset($_SERVER['HTTPS']) ? "https" : "http") . '://' . $_SERVER['HTTP_HOST'] . $folder. '/oauth2callback.php';
}


/**
 * Authenticating to Google using Oauth2
 * Documentation:  https://developers.google.com/identity/protocols/OAuth2
 * Returns a Google client with refresh token and access tokens set. 
 *  If not authencated then we will redirect to request authencation.
 * @return A google client object.
 */
function getOauth2Client() {
	try {
		
		$client = buildClient();
        
		// Set the refresh token on the client.	
		if (isset($_SESSION['refresh_token']) && $_SESSION['refresh_token']) {
			$client->refreshToken($_SESSION['refresh_token']);
		}
		
		// If the user has already authorized this app then get an access token
		// else redirect to ask the user to authorize access to Google Analytics.
		if (isset($_SESSION['access_token']) && $_SESSION['access_token']) {
			
			// Set the access token on the client.
			$client->setAccessToken($_SESSION['access_token']);					
			
			// Refresh the access token if it's expired.
			if ($client->isAccessTokenExpired()) {				
				$client->fetchAccessTokenWithRefreshToken($client->getRefreshToken());
				$client->setAccessToken($client->getAccessToken());	
				$_SESSION['access_token'] = $client->getAccessToken();				
			}			
			return $client;	
		} else {
			// We do not have access request access.
			header('Location: ' . filter_var( $client->getRedirectUri(), FILTER_SANITIZE_URL));
		}
	} catch (Exception $e) {
		print "An error occurred: " . $e->getMessage();
	}
}
?>